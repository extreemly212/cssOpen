.tagSelector h1{color: #0c0; font-size:20px;}
.tagSelector p{color:#0c3; font-size:15px;}
.tagSelector span{color: #0c6; font-size:12px;}
/* ? tag를 선택하여 style 할 수 있다. */

.idSelector #exampleText{
    font-size:12px; color: navy; border:1px solid navy;
}
/* ? id를 선택하여 style 할 수 있다. */

.classSelector .f_size{font-size:20px;}
.classSelector .f_weight{font-weight:bold;}
.classSelector .f_color{color: #9cf;}
/* ? class를 선택 하여 style, 다중 클래스로 분리작업도 가능하다.*/

.attrSelector fieldset{
    border: 1px solid #dadada; background-color: #fafafa;
}
.attrSelector legend{
    border: 1px solid #dadada; background-color: #fafafa;
    padding: 5px; font-size:12px;
}
.attrSelector ul li{display: block;}
.attrSelector ul li label, .attrSelector ul li input{
    vertical-align: middle;
}
.attrSelector ul li label {display:inline-block;}
.attrSelector ul li input[type='text']{
    background-color:#0cf;
    border: 1px solid #555;
    line-height:21px; padding:2px 5px;
}
.attrSelector ul li input[type='password']{
    background-color:darkred;
    border: 1px solid #f00;
    color: white; line-height: 21px; padding: 2px 5px;
}
.attrSelector ul li input[type='radio']{
    width: 15px; height: 15px;
}
/* ?attr 선택자는 type이 있는 객체면 type 별로 선택 할 수 있다. */

.directSelector > h1{
    font-size:14px; color:#66f;
}
.directSelector > span{
    font-size:12px; color:#906;
}
/*
    ? bubble
    * 구조적으로 다른 동일태그를 제외하고, 직계 자손 객체 태그에 동일한
    * 스타일을 적용 할 수 있다.
*/
.directSelector ul > li{font-size:20px;}
.directSelector ul > li ol > li{
    font-size: 12px;
}

/* .stringAttrSelector img{width:100px; height:100px;} */
.stringAttrSelector img[src$=png]{
    border: 10px solid #f00;
}
.stringAttrSelector img[src$=jpg]{
    border: 5px dotted #0f0;
}
.stringAttrSelector img[src$=gif]{
    border:1px double #00f;
}
/*
    ? 문자유형선택자
    * 해당 문자열 유형으로 분리 적용 할 수 있다.
 */
 .sameSelector h1+h2{
     font-size:40px; color:#fcf;
 }
 .sameSelector h1~h2{
     background-color: #555;
 }
 /*
    ? 동위 선택자
    * a+b는 a 바로 뒤에 위치하는 b, a~b는 a 뒤에 오는 모든 b
 */
 .statusSelector input[type='checkbox']:checked + label{
     line-height:0px;
    }
.statusSelector label{
    vertical-align: middle; overflow: hidden;
    display:inline-block; line-height: 25px;
    transition-duration: 1s;
}
/*
    ? 상태선택자 + 동위선택자
    * 1. checkbox status 가 checked일 경우, 바로 뒤 label height = 0;
    ! :checked 체크된상태, :focus 초점 맞춰진 상태
    ! :enabled 사용가능, :disabled 사용 불가능

    * 2. label의 기본 설정 (css)
    ! height 가 실존해야한다.
    ! display는 block 계열, overflow는 방향(x,y,both)의 hidden

    * 3. 벤더프리픽스를 통한 각 브라우저 별 애니메이션 설정
    ! transition-duration
*/
.statusSelector input[type='text']:enabled{
    background-color: black; color:deeppink;
}
.statusSelector input[type='text']:disabled{
    background-color:deeppink; color:black;
}
.normalSelector ul{overflow:hidden; list-style: none;}
.normalSelector ul li{margin:0; padding:0; float:left; padding:15px;}
.normalSelector ul li:first-child{border-radius: 25px 0 0 25px;}
.normalSelector ul li:last-child{border-radius: 0 25px 25px 0;}
.normalSelector ul li:nth-child(odd){
    background-color:#444; color:white;
}
.normalSelector ul li:nth-child(even){background-color:#0cf;}

.normalSelector table{
    margin-bottom: 200px;
    width: 100%;
    border-width:3px 1px 2px 1px;
    border-style: solid;
    border-color:#3cf;
}
.normalSelector table caption{
    color:#555; font-size:12px; line-height:40px;
}
.normalSelector table tr > *{
    width:14.28%;
    border-right:2px solid #3cf;
    border-bottom:2px solid #3cf;
    padding:10px 0;
}
.normalSelector table tr th{
    background-color: #505050;
    color: white;
}
.normalSelector table tr td{
    text-align: center;
}
.shapeSelector h1:nth-of-type(1){color: #30f;}
.shapeSelector h2:last-of-type{color: #0c6;}
.shapeSelector h3:first-of-type{color: #f06;}
/* 
    ? of-type
    * first-of-type, last-of-type은 형제 관계 중 첫 번째 혹은 마지막
    * 의 지정된 태그를 선택할 수 있다.
    * nth-of-type으로 수열을 사용 할 수도 있다.
    ! body > section:first-of-type 이런 식의 범위 응용도 가능 하다.
*/

.textSelector h1::first-letter{
    font-size:100px; color:#09f;
}
.textSelector p::first-line{
    color: #090; line-height:30px; font-size: 20px;
    text-decoration: underline;
}
/*
    ? 문자 선택자
    * :: first-letter 앞 글자 만,
    * :: first-line 첫 번째 줄만(br 로 분리)
    ! :로도 작동 되지만, :: 가 정석
*/
.backAndFrontSelector p{counter-increment: rint;}
.backAndFrontSelector p::before{content:counter(rint) ".";}
.backAndFrontSelector p::after{
    content:"-" attr(data-page) "page";
    font-weight:bold; color:deeppink;
}

/*
전후 문자선택자
::before : 선택된 태그의 앞 공간을 선택한다.
::after : 선택된 태그의 뒷 공간을 선택한다.
counter-increment:rint -> rint(인수에  가까운 정수 반환) 라는 카운터 이름을 만들어 낸다.
content:counter(rint) -> 카운터가 태그의 갯수 만큼 하나씩 올라가며 출력 되게 한다.
"-" => - 를 출력해라 / attr(data-page) => data-page로 설정 되어있는 부분을 출력하라.
/ "page" => page를 출력하라.

ul , ol 등의 리스트 형식에서 count를 사용 할 때는 counter-reset을 하고 사용 하는 것을
권장
ex > counter-reset: 카운터이름 0;
.backandfrontSelector ul li{counter-increment:rint;} -> 카운터이름을 선언
.backandfrontSelector ul li{counter-reset:rint 0;} -> 카운터 초기화
.backandfrontSelector p::before{content:counter(rint) ".";} -> 카운터 시작
.backandfrontSelector p::after{content:"-" attr(data-page) "page"; font-weight:bold; color:deeppink;} -> 출력


data- 라는 것은 사용자 지정 속성으로 웹 표준에서 인정 해주는 개인 자율에 의한
속성 지정법이다.
대부분의 솔루션, 템플릿, jquery등에서 널리 이용 되고 있으니, 반드시 알아 둘 것.

ex> data-roll="listview" 라고 선언 하면 jquery mobile ui 템플릿에서 기본으로 공급하는
모바일에서의 리스트 출력 작동법 및 스타일 이 된다.
*/